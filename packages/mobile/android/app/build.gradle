apply plugin: "com.android.application"

import com.android.build.OutputFile
import groovy.json.JsonSlurper

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    enableHermes: false,  // clean and rebuild if changing
    inputExcludes: ["ios/**", "__tests__/**", "__mocks__/**", "js_build/**"]
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Reads the .env/.env.production file and create a HashMap from defined key=value pairs.
 * env property then can be accessed as:
 * BuildConfig.Env.get("PROPERTY_NAME")
 */
def getEnvProperties() {
    def ENV_FILE_PATH = "../../../../.env"
    def PROD_ENV_FILE_PATH = "../../../../.env.production"
    def envProps = new Properties()
    def envFile = file(ENV_FILE_PATH).exists() ? file(ENV_FILE_PATH) : file(PROD_ENV_FILE_PATH)
    try {
        envProps.load(new FileInputStream(envFile))
        return envProps
    } catch (FileNotFoundException e) {
        System.out.println('.env or .env.production file was not found!')
        return null
    }
}

def getEnvMapAsString() {
    def envProps = getEnvProperties()
    def prefix = 'new java.util.HashMap<String, String>(){{ '
    def suffix = '}}'
    def value = ''
    if (envProps != null) {
        for (prop in envProps) {
            value += String.format('put(\"%s\",\"%s\"); ', prop.key, prop.value)
        }
    }
    return String.format('%s%s%s', prefix, value, suffix)
}

/**
 * Reads the .env/.env.production file and create a Map of key:"value" pairs of env properties
 */
def getEnvMap() {
    def envProps = getEnvProperties()
    def envMap = [:]
    if (envProps != null) {
        for (prop in envProps) {
            envMap.put(prop.key, prop.value)
        }
    }
    return envMap
}

/**
 * Generate version code and name based on the package.json version
**/

def getNpmVersion() {
    def PACKAGE_JSON_PATH = "../../package.json"
    def inputFile = file(PACKAGE_JSON_PATH)
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}

def getNpmVersionSegments() {
    def (major, minor, patch) = getNpmVersion().tokenize('.')
    return [Integer.parseInt(major), Integer.parseInt(minor), Integer.parseInt(patch)]
}

def generateVersionCode() {
    def (major, minor, patch) = getNpmVersionSegments()
    return rootProject.ext.minSdkVersion * 1000000 + major * 10000 + minor * 100 + patch;
}

def generateVersionName() {
    return getNpmVersion()
}

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries false
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "com.mobileapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        // make ENV props accessible to .java files
        buildConfigField 'java.util.HashMap<String, String>', 'Env', getEnvMapAsString()
        // make ENV props accessible to androidmanifest.xml
        manifestPlaceholders = getEnvMap()
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('ANDROID_UPLOAD_STORE_FILE')) {
                def envProps = getEnvMap()
                storeFile file(ANDROID_UPLOAD_STORE_FILE)
                storePassword envProps.get("ANDROID_UPLOAD_STORE_PASSWORD")
                keyAlias envProps.get("ANDROID_UPLOAD_KEY_ALIAS")
                keyPassword envProps.get("ANDROID_UPLOAD_KEY_PASSWORD")
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        dev {
            initWith debug
            applicationIdSuffix ".development"
            ext.suffix = "Development"
            matchingFallbacks = ['debug']
        }
        // Build type name cannot start with "test" and if we want to have release package prepared it is necessary to prefix the name
        // of the build type with "release" because react native checks for the "release" string in the build type name and
        // optimizes the build accordingly.
        // This can be partially bypassed by using:
        //      project.ext.react = [
        //          bundleInQa: true,
        //          devDisabledInQa: true
        //      ]
        // But for example YellowBox warnings are still thrown.
        // The only safe way for now is to include "release" string in the build type name.
        releaseQa {
            initWith release
            applicationIdSuffix ".qa"
            ext.suffix = "QA"
            matchingFallbacks = ['release']
        }
        releaseProduction {
            initWith release
            ext.suffix = ""
            matchingFallbacks = ['release']
        }
        debugQa {
            initWith debug
            applicationIdSuffix ".qa"
            ext.suffix = "QA"
            matchingFallbacks = ['debug']
        }
        debugProduction {
            initWith debug
            ext.suffix = ""
            matchingFallbacks = ['debug']
        }
    }

    // Ignore unnecessary build variants
    variantFilter { variant ->
        def buildName = variant.buildType.name
        if (buildName == "debug" || buildName == "release") {
            setIgnore(true)
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        // Set correct APP_NAME
        if (variant.buildType.ext.has("suffix")) {
            // Name of the app
            def name = "MonorepoMobile"
            def suffix = variant.buildType.ext.suffix
            if (suffix) {
                variant.resValue 'string', 'APP_NAME', name + "-" + suffix
            }
            else {
                variant.resValue 'string', 'APP_NAME', name
            }
        }

        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'

    if (enableHermes) {
      def hermesPath = "../../node_modules/hermes-engine/android/";
      debugImplementation files(hermesPath + "hermes-debug.aar")
      releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
      implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
